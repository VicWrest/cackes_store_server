const { startOptions } = require("../tg-options/options");
const { getAllOrders } = require("./orderController");
require('dotenv').config();

class Controller {
    async start(bot, msg){
        const chatId = msg.chat.id;
        try{
            //await bot.sendPhoto(chatId, '../static/mainPhoto/startPhoto.jpeg')            
            await bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–æ–º–∞—à–Ω—é—é –ú–∞—Å—Ç–µ—Ä—Å–∫—É—é –≤–∫—É—Å–Ω—ã—Ö –¥–µ—Å–µ—Ä—Ç–æ–≤ Tsyganova's cakesüéÇüßÅ`, startOptions)
        }
        catch(err){
            console.log(err);
            bot.sendMessage(chatId, '–£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞üôä');
            bot.sendMessage(chatId, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start üôÉ');
        }
       
    }
    async getOrders(bot, msg){
        const chatId = msg.chat.id;
        try{
            const orders = await getAllOrders('username');
            //TO DO 
            //–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ order 
            //–∏ –≤—ã–≤–µ—Å—Ç–∏ –∏—Ö
            await bot.answerWebAppQuery(queryId, {
                type: 'article',
                id: queryId,
                title: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã',
                input_message_content: {
                    message_text: `–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É ${summa}, ${products.map(item => item.title).join(', ')}`
                }
            });
        }
        catch(err){
            console.log(err);
            bot.sendMessage(chatId, '–£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞üôä');
            bot.sendMessage(chatId, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start üôÉ');
        }
    }
    async getErrorAndInstruction(bot, msg){
        const chatId = msg.chat.id;
        try{
            await bot.sendMessage(chatId, '–£–ø—Å!–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª üôä');
            await bot.sendPhoto(chatId, `–°–ö–†–ò–ù`) //TO DO
            await bot.sendMessage(chatId, `–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–∫–∞–∑–∞–Ω–Ω—É—é –≤—ã—à–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã `)
        }
        catch(err){
            console.log(err);
            bot.sendMessage(chatId, '–£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞üôä');
            bot.sendMessage(chatId, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start üôÉ');
        }
       
    }

    async creatingNewOrder(bot, msg){
        const chatId = msg.chat.id;
        try{
            const data = JSON.parse(msg.data); //—Ç–æ —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ options callback_data
            if(data.answer === true){
                //TO DO –≤ —Ñ—É–Ω–∫—Ü–∏—é creatingNewOrder –Ωe–æ–±—Ö–æ–¥–∏–º–æ –µ—â–µ –ø–µ—Ä–µ–¥–∞—Ç—å userName –∏–∑ tg
                await creatingNewOrder(chatId, data, 'username') 
                return;
            }
            else{
                throw new Error();
            }
        }
        catch(err){
            console.log(err);
            bot.sendMessage(chatId, '–£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞üôä');
            bot.sendMessage(chatId, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start üôÉ');
        }
       
    }
}

module.exports = new Controller();